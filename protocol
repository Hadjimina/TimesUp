- 000 denotes some known integer
- When nothing is specified it is assumed that first the "SENDING" is executed and afterwards the "RECEIVE"
- When we have  "BCAST" this means that the server sends this data to everyone w.o. first receiving an message
- "SENDING" is meant as "The Android App is SENDING"
- "RECEIVING" is meant as "The he Android App is RECEIVING from the server"
- The things we are unsure if we need them for the protocol have been omitted

 ________  _______   ________   ________  ___  ________   ________
|\   ____\|\  ___ \ |\   ___  \|\   ___ \|\  \|\   ___  \|\   ____\
\ \  \___|\ \   __/|\ \  \\ \  \ \  \_|\ \ \  \ \  \\ \  \ \  \___|
 \ \_____  \ \  \_|/_\ \  \\ \  \ \  \ \\ \ \  \ \  \\ \  \ \  \  ___
  \|____|\  \ \  \_|\ \ \  \\ \  \ \  \_\\ \ \  \ \  \\ \  \ \  \|\  \
    ____\_\  \ \_______\ \__\\ \__\ \_______\ \__\ \__\\ \__\ \_______\
   |\_________\|_______|\|__| \|__|\|_______|\|__|\|__| \|__|\|_______|
   \|_________|


1. Join Game:
(Client -> Server)
{
    "requestType":  "join",
    "gameId":       000,
    "clientId":     -1,
    "body": {}
}


2. Join Team:
(Client -> Server)
The value in "teamToJoin" is some teamId we got when we joined the game
{
    "requestType":  "joinTeam",
    "gameId":       000,
    "clientId":     000,
    "body":
    {
        "teamToJoin":   000
    }
}


3. New Game
(Client -> Server)
{
    "requestType":  "newGame",
    "gameId":       -1,
    "clientId":     -1,
    "body":
    {
        "teamName1":        "someName",
        "teamName2":        "someName",
        "timePerRound":     000,
        "wordsPerPerson":   000
        "username":         "someName",
        "rounds":           [true,false,false,true,true],

    }
}


4. Ready
(Client -> Server)
{
    "requestType":  "ready",
    "gameId":       000,
    "clientId":     000,
    "body":
    {
        "wordList": ["word1", "word2",....]
    }
}


5. Next Round:
(Client->Server)
{
    "requestType":  "nextRound",
    "gameId":       000,
    "clientId":     000,
    "body":         {}
}


6. Round Finished:
(Client->Server)
{
    "requestType":  "roundFinished",
    "gameId":       000,
    "clientId":     000,
    "body":
    {
    	"phaseNumber":  000,
        "wordIndex":    000
    }
}



 ________  _______   ________  _______   ___  ___      ___ ___  ________   ________
|\   __  \|\  ___ \ |\   ____\|\  ___ \ |\  \|\  \    /  /|\  \|\   ___  \|\   ____\
\ \  \|\  \ \   __/|\ \  \___|\ \   __/|\ \  \ \  \  /  / | \  \ \  \\ \  \ \  \___|
 \ \   _  _\ \  \_|/_\ \  \    \ \  \_|/_\ \  \ \  \/  / / \ \  \ \  \\ \  \ \  \  ___
  \ \  \\  \\ \  \_|\ \ \  \____\ \  \_|\ \ \  \ \    / /   \ \  \ \  \\ \  \ \  \|\  \
   \ \__\\ _\\ \_______\ \_______\ \_______\ \__\ \__/ /     \ \__\ \__\\ \__\ \_______\
    \|__|\|__|\|_______|\|_______|\|_______|\|__|\|__|/       \|__|\|__| \|__|\|_______|


1. Join Game
(Server -> Client)
{
    "returnType":   "ACK",
    "requestType":  "join",
    "clientId":     000,
    "gameId":       000,
    "body":
    {
        "teamName1":    "someName1",
        "teamName2":    "someName2",
        "teamId1":      000,
        "teamId2":      000,
        "port":         000
    }
}


2.a Join Team (Game has not started yet)
(Server -> Client)
{
    "returnType":   "ACK",
    "requestType":  "joinTeam",
    "clientId":     000,
    "gameId":       000,
    "body":
    {
        "hastStarted":      False,
        "startTime":        -1,
        "timePerRound":     60,
        "wordsPerPerson":   000
    }
}


2.b Join Team (Game is already running)
(Server -> Client)
{
    "returnType":   "ACK",
    "requestType":  "joinTeam",
    "clientId":     000,
    "gameId":       000,
    "body":
    {
        "hastStarted":      True,
        "startTime":        000,
        "timePerRound":     60,
        "wordsPerPerson":   000
    }
}


3. New Game
(Server -> Client)
{
    "returnType":   "ACK",
    "requestType":  "newGame",
    "clientId":     000,
    "gameId":       000,
    "body":
    {
        "teamName1":    "someName1",
        "teamName2":    "someName2",
        "teamId1":      000,
        "teamId2":      000,
        "port":         000
    }
}


4. Ready
(Server -> Client)
{
    "returnType":   "ACK",
    "requestType":  "ready",
    "clientId":     000,
    "gameId":       000,
    "body":         {}
}


5. Broadcast Setup
(Server -> Client)
The wordList is ordered in the way the player have to guess the words!
{
    "returnType":   "setup",
    "requestType":  "",
    "clientId":     000,
    "gameId":       000,
    "body":
    {
        wordList:   [word1, word2, word3,...]
    }
}


6. Broadcast Start Round:
(Server -> Client)
startTime is the server time in milliseconds as an integer
activeTeam is the id of the currently guessing team
wordIndex is the current start index in the wordList
{
    "returnType":   "startRound",
    "requestType":  "",
    "clientId":     000,
    "gameId":       000,
    "body":
    {
        "startTime":        000,
        "activeTeam":       000,
        "activePlayerId":   000,
        "activePlayerName": "someName",
        "phaseNumber":      000,
        "wordIndex":        000
    }
}


7. Broadcast Round Finished / First Ever Round
(Server -> Client)
if the game is over the phase wil be -1
{
    "returnType":   "ACK",
    "requestType":  "roundFinished",
    "clientId":     000,
    "gameId":       000,
    "body":
    {
        "scoreTeam1":       000,
        "scoreTeam2":       000,
        "nextPlayerId":     000,
        "nextPlayerName":   "someName",
        "nextPhase":        000
    }
}


8. Error Message
(Server -> Client)
if something went wrong
{
    "returnType":   "Error",
    "requestType":  "someRequestType",
    "clientId":     000,
    "gameId":       000,
    "body":
    {
        "errorType":    "description of error"
    }
}